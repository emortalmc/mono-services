name: "Build and Deploy Services"

on:
  push:
    branches: [ main ]

jobs:
  # Detect services and modules, identify those that have been updated
  detect-services:
    runs-on: ubuntu-latest
    outputs:
      all_modules: ${{ steps.detect-services.outputs.all_modules }}
      updated_services: ${{ steps.detect-services.outputs.updated_services }}
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: 1.23
          cache: false
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
        # Setup Go so we can run the builder
      - name: detect-services
        id: detect-services
        run: |
          services=$(go run builder/main.go)
          echo "Raw builder output: $services"
          all_modules=$(echo "$services" | jq -r '.all_modules | @json')
          updated_services=$(echo "$services" | jq -r '.updated_services | @json')
          echo "all_modules=$all_modules" >> $GITHUB_OUTPUT
          echo "updated_services=$updated_services" >> $GITHUB_OUTPUT
      - name: Print Detected Services
        run: |
          echo "All Modules: ${{ steps.detect-services.outputs.all_modules }}"
          echo "Updated Services: ${{ steps.detect-services.outputs.updated_services }}"

  # Lint all modules
  lint:
    needs: detect-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-services.outputs.all_modules) }}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Lint Module
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          args: ${{ matrix.module }}/... --timeout 5m0s

  # Build and push updated services
  build-and-publish:
    needs: [detect-services, lint]
    if: needs.detect-services.outputs.updated_services != '[]' # Only run if there are services to build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-services.outputs.updated_services) }}
    steps:
      - uses: actions/checkout@v4

      - name: "Identify Environment"
        shell: bash
        run: |
          tag_prefix="ghcr.io/emortalmc/${{ matrix.service }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            tags="$tag_prefix:${{ github.sha }},$tag_prefix:latest"
          else
            tags="$tag_prefix:${{ github.sha }}"
          fi

          echo "DOCKER_TAGS=$tags" >> "$GITHUB_ENV"

      - name: "Login to container registry"
        uses: "docker/login-action@v2"
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v2"

      - name: "Build and push"
        uses: "docker/build-push-action@v4"
        with:
          context: "./services/${{ matrix.service }}"
          file: "./services/${{ matrix.service }}/Dockerfile"
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKER_TAGS }}

  # Deploy updated services
  deploy:
    needs: [build-and-publish, detect-services, lint]
    if: needs.detect-services.outputs.updated_services != '[]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: emortalmc/argocd-deployments
          ref: main
          token: ${{ secrets.DEPLOYMENTS_REPO_TOKEN }}
      - name: Update Service Versions
        shell: bash
        run: |
          services=$(echo '${{ needs.detect-services.outputs.updated_services }}' | jq -r '.[]')
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          for service in $services; do
            echo "Updating image for $service to ${{ github.sha }}"
            sed -i "s|version: .*|version: ${{ github.sha }}|g" "service/values/$service.yaml"
            git commit -a -m "Update $service to ${{ github.sha }}"
          done
          git push https://ðŸ˜›:${{ secrets.DEPLOYMENTS_REPO_TOKEN }}@github.com/emortalmc/argocd-deployments.git
